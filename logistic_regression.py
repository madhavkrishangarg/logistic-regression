# -*- coding: utf-8 -*-
"""Madhav-Krishan-Garg_logistic_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cP0Fh58w3ZzD61y8uH-AsZFIvlVgWWxI
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
import numpy as np
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'
names = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']
data = pd.read_csv(url, names=names, na_values=' ?')

data[data==' ?']=np.nan

# data.dropna(inplace=True)

data.replace(np.nan,"UNKNOWN",inplace=True)

numerical_columns = ['age', 'fnlwgt', 'education-num', 'capital-gain', 'capital-loss', 'hours-per-week']

scaler = StandardScaler()
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

data['education'].unique()
data['education'].value_counts()
data['education']= LabelEncoder().fit_transform(data['education'])

data['occupation'].unique()
data['occupation'].value_counts()
data['occupation']= LabelEncoder().fit_transform(data['occupation'])

data['relationship'].unique()
data['relationship'].value_counts()
data['relationship']= LabelEncoder().fit_transform(data['relationship'])

data['race'].unique()
data['race'].value_counts()
data['race']= LabelEncoder().fit_transform(data['race'])

data['sex'].unique()
data['sex'].value_counts()
data['sex']= LabelEncoder().fit_transform(data['sex'])

data['marital-status'].unique()
data['marital-status'].value_counts()
data['marital-status']= LabelEncoder().fit_transform(data['marital-status'])

data['native-country'].unique()
data['native-country'].value_counts()
data['native-country']= LabelEncoder().fit_transform(data['native-country'])

data.workclass.unique()
data['workclass'].value_counts()
data['workclass']= LabelEncoder().fit_transform(data['workclass'])

data['income'].unique()
data['income'] = data['income'].map({' <=50K' : 0, ' >50K' : 1})

data['workclass'] = data['workclass'].astype('int')
data['marital-status'] = data['marital-status'].astype('int')
data['native-country'] = data['native-country'].astype('int')

X=data.drop("income", axis=1)
y=data["income"]

model=LogisticRegression(max_iter=1000)
model.fit(X,y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

y_pred=model.predict(X)
full_data_accuracy=accuracy_score(y, y_pred)

y_pred=model.predict(X_train)
train_accuracy=accuracy_score(y_train, y_pred)

y_pred=model.predict(X_test)
test_accuracy=accuracy_score(y_test, y_pred)

test_accuracy_list = []
for i in range(100):

    X_train, X_remaining, y_train, y_remaining = train_test_split(X, y, test_size=0.3, random_state=i)
    X_val, X_test, y_val, y_test = train_test_split(X_remaining, y_remaining, test_size=0.5, random_state=i)

    model1 = LogisticRegression(max_iter=1000)
    model1.fit(X_train, y_train)

    y_val_pred1 = model1.predict(X_val)
    val_accuracy1 = accuracy_score(y_val, y_val_pred1)

    if val_accuracy1 > 0.8:
        y_test_pred1 = model1.predict(X_test)
        test_accuracy1 = accuracy_score(y_test, y_test_pred1)
        test_accuracy_list.append(test_accuracy1)

mean_test_accuracy=np.mean(test_accuracy_list)
std_test_accuracy=np.std(test_accuracy_list)

print(f"Full dataset accuracy: full: {full_data_accuracy:.2f}, train: {train_accuracy:.2f}, test: {test_accuracy:.2f}")
print(f"70-15-15 Cross validation boxplot:: mean={mean_test_accuracy:.2f}, std={std_test_accuracy:.4f}")
